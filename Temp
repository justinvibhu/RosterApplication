
//Search
// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');
var NodeList = Java.type('org.w3c.dom.NodeList');

// Your XML string
var xmlStr = `
<root>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_ClientId</ns2:PropertyName>
        <ns2:PropertyValue>74535</ns2:PropertyValue>
    </CriteriaExpression>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_Plancode</ns2:PropertyName>
        <ns2:PropertyValue>SOH</ns2:PropertyValue>
    </CriteriaExpression>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_Plancode</ns2:PropertyName>
        <ns2:PropertyValue>Dental-E</ns2:PropertyValue>
    </CriteriaExpression>
</root>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagName("CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagName("ns2:PropertyName");
        var propertyValues = criteria.getElementsByTagName("ns2:PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function (item) {
    print("Property Name:", item.propertyName);
    print("Property Value:", item.propertyValue);
});

























function extractPropertyValue(propertyName) {
    var propertyNodes = xmlDoc.getElementsByTagName("for:PropertyName");
    for (var i = 0; i < propertyNodes.getLength(); i++) {
        var node = propertyNodes.item(i);
        if (node.getTextContent().trim() === propertyName) {
            var valueNode = node.nextSibling;
            return valueNode.getTextContent().trim();
        }
    }
    return null; // Property not found
}

// Get the values
var attachmentKey = extractPropertyValue("AttachmentKey");
var mimeType = extractPropertyValue("MimeType");



// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Your XML string
var xmlStr = `
<CriteriaExpression>
    <CriteriaOperator>AND</CriteriaOperator>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form Id -->
        <for:PropertyName>AttachmentKey</for:PropertyName>
        <for:PropertyValue>43132</for:PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.AttachmentKey</ComparedPropertyName>
    </Criteria>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form type -->
        <for:PropertyName>MimeType</for:PropertyName>
        <for:PropertyValue>PDF</for:PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.MimeType</ComparedPropertyName>
    </Criteria>
</CriteriaExpression>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract property value based on property name with namespace prefix
function extractPropertyValueWithNamespace(propertyName) {
    var nodes = xmlDoc.getElementsByTagNameNS("*", propertyName);
    if (nodes.getLength() > 0) {
        return nodes.item(0).getTextContent().trim();
    }
    return null; // Property not found
}

// Get the values with namespace prefix
var attachmentKey = extractPropertyValueWithNamespace("for:PropertyName");
var mimeType = extractPropertyValueWithNamespace("for:PropertyValue");

print("Attachment Key:", attachmentKey);
print("MIME Type:", mimeType);




// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Your XML string
var xmlStr = `
<CriteriaExpression>
    <CriteriaOperator>AND</CriteriaOperator>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form Id -->
        <PropertyName>AttachmentKey</PropertyName>
        <PropertyValue>43132</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.AttachmentKey</ComparedPropertyName>
    </Criteria>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form type -->
        <PropertyName>MimeType</PropertyName>
        <PropertyValue>PDF</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.MimeType</ComparedPropertyName>
    </Criteria>
</CriteriaExpression>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract property value based on property name
function extractPropertyValue(propertyName) {
    print("Extracting property value for:", propertyName);
    var criteriaNodes = xmlDoc.getElementsByTagName('PropertyName');
    for (var i = 0; i < criteriaNodes.getLength(); i++) {
        var node = criteriaNodes.item(i);
        if (node.getTextContent() === propertyName) {
            print("Found property:", propertyName);
            var valueNode = node.nextSibling;
            var value = valueNode ? valueNode.getTextContent().trim() : null;
            print("Extracted value:", value);
            return value;
        }
    }
    print("Property not found:", propertyName);
    return null; // Property not found
}

// Get the values
var attachmentKey = extractPropertyValue("AttachmentKey");
var mimeType = extractPropertyValue("MimeType");

print("Attachment Key:", attachmentKey);
print("MIME Type:", mimeType);





// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Your XML string
var xmlStr = `
<CriteriaExpression>
    <CriteriaOperator>AND</CriteriaOperator>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form Id -->
        <PropertyName>AttachmentKey</PropertyName>
        <PropertyValue>43132</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.AttachmentKey</ComparedPropertyName>
    </Criteria>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form type -->
        <PropertyName>MimeType</PropertyName>
        <PropertyValue>PDF</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.MimeType</ComparedPropertyName>
    </Criteria>
</CriteriaExpression>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract property value based on property name
function extractPropertyValue(propertyName) {
    var criteriaNodes = xmlDoc.getElementsByTagName('PropertyName');
    for (var i = 0; i < criteriaNodes.getLength(); i++) {
        var node = criteriaNodes.item(i);
        if (node.getTextContent() === propertyName) {
            return node.getNextSibling().getTextContent().trim();
        }
    }
    return null; // Property not found
}

// Get the values
var attachmentKey = extractPropertyValue("AttachmentKey");
var mimeType = extractPropertyValue("MimeType");

print("Attachment Key:", attachmentKey);
print("MIME Type:", mimeType);
