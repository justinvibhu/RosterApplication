// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// XML string (assuming xmlStr contains your XML)
var xmlStr = `
<NS1:Envelope xmlns:NS1="http://schemas.xmlsoap.org/soap/envelope/">
    <NS1:Body>
        <NS2:FormRetrieval xmlns:NS2="http://services.eforms.metlife.com/formsAdminLookup/">
            <ServiceInfo>
                <TraceId>9c6269ef-2195-4fe2-a194-bc9dc6a81646</TraceId>
            </ServiceInfo>
            <DocInfo>
                <ID>60392</ID>
                <DocType>PDF</DocType>
            </DocInfo>
        </NS2:FormRetrieval>
    </NS1:Body>
</NS1:Envelope>`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract the ID value
function extractIDValue() {
    var docInfo = xmlDoc.getElementsByTagNameNS("*", "DocInfo").item(0);
    if (docInfo) {
        var idElement = docInfo.getElementsByTagNameNS("*", "ID").item(0);
        if (idElement) {
            return idElement.getTextContent().trim();
        }
    }
    return null;
}

// Extract and log the ID value
var idValue = extractIDValue();
console.log(idValue);  // Output: 60392


















// Import required Java classes
var FileReader = Java.type('java.io.FileReader');
var BufferedReader = Java.type('java.io.BufferedReader');
var FileWriter = Java.type('java.io.FileWriter');
var BufferedWriter = Java.type('java.io.BufferedWriter');
var File = Java.type('java.io.File');
var Scanner = Java.type('java.util.Scanner');

// Your JSON data
var json = {
    "items": [
        {
            "documentID": "idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIM)",
            "self": "/dms-cmis/v2/searches/documents/idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIm)",
            "number": "[00771588-1800-C24C-8178-17F3982485DE]",
            "documentName": "JY0333-71269",
            "documentDescription": "CLAIM; #10",
            "mimeTypeName": "application/pdf",
            "categorization": {},
            "URL": {
                "URLID": "https://qa.dms.metlife.com/dms-viewer/web/viewer"
            },
            "producer": {
                "StakeholderManagerOfOwner": "Vanatta, Lisa"
            },
            "person": {
                "personFullName": "Jensen, Jackie"
            },
            "form": {
                "lineOfBusinessName": "Group Benefits",
                "formName": "Dental Claim Form",
                "formDescription": "Dental Claim Form",
                "onlyDirectLinkIndicator": "true",
                "pagesCount": "6",
                "regionListText": "All States",
                "effectiveDateTimestamp": "05/23",
                "MajorVersionNumber": "1",
                "formNumber": "JY0333-71269"
            },
            "product": {
                "productName": "DENTAL-E; #101",
                "productClassName": "Group Dental"
            }
        },
        {
            "documentID": "idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIM)",
            "self": "/dms-cmis/v2/searches/documents/idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIm)",
            "number": "[00771588-1800-C24C-8178-17F3982485DE]",
            "documentName": "JY0333-71269",
            "documentDescription": "CLAIM; #10",
            "mimeTypeName": "application/pdf",
            "categorization": {},
            "URL": {
                "URLID": "https://qa.dms.metlife.com/dms-viewer/web/viewer"
            },
            "producer": {
                "StakeholderManagerOfOwner": "Vanatta, Lisa"
            },
            "person": {
                "personFullName": "Jensen, Jackie"
            },
            "form": {
                "lineOfBusinessName": "Group Benefits",
                "formName": "Dental Claim Form",
                "formDescription": "Dental Claim Form",
                "onlyDirectLinkIndicator": "true",
                "pagesCount": "6",
                "regionListText": "All States",
                "effectiveDateTimestamp": "05/23",
                "MajorVersionNumber": "1",
                "formNumber": "JY0333"
            },
            "product": {
                "productName": "DENTAL-E; #101",
                "productClassName": "Group Dental"
            }
        }
    ]
};

// CSV file path
var csvFilePath = 'path/to/your/csv/file.csv';

// Read CSV file and parse into an object
var csvData = "";
var bufferedReader = new BufferedReader(new FileReader(csvFilePath));
var line;
while ((line = bufferedReader.readLine()) != null) {
    csvData += line + "\n";
}
bufferedReader.close();

// Parsing CSV data
var csvRecords = csvData.split("\n");
var formNumberToOID = {};
for (var i = 1; i < csvRecords.length; i++) {
    var record = csvRecords[i].split(",");
    formNumberToOID[record[1]] = record[0];
}

// Function to generate XML for each item
function generateXML(item) {
    var oid = formNumberToOID[item.form.formNumber] || '';

    return `<ns2:FormDocuments>
    <ns2:Met_FormAssociation>
        <ns2:Met_PlanType>${item.documentDescription.replace(/; #\d+/, '')}</ns2:Met_PlanType>
        <ns2:Met_PlanCode>${item.form.formName}</ns2:Met_PlanCode>
    </ns2:Met_FormAssociation>
    <ns2:Attachment>
        <ns2:AttachmentKey>${oid}</ns2:AttachmentKey>
        <ns2:Met_AttachmentStatusDesc>${item.product.productName}</ns2:Met_AttachmentStatusDesc>
        <ns2:Met_AttachmentSize>${item.form.pagesCount}</ns2:Met_AttachmentSize>
        <ns2:MimeType>${item.mimeTypeName.split('/').pop()}</ns2:MimeType>
    </ns2:Attachment>
</ns2:FormDocuments>\n\n`;
}

// Generate XML for each item
var xmlOutput = "";
for (var i = 0; i < json.items.length; i++) {
    xmlOutput += generateXML(json.items[i]);
}

// Print XML output
print(xmlOutput);




let now = new Date();

let currentDate = now.toISOString().split('T')[0];
let currentTime = now.toTimeString().split(' ')[0];

console.log(`Current Date: ${currentDate}`);
console.log(`Current Time: ${currentTime}`);

//
var json = {
  "items": [
    {
      "documentID": "idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIM)",
      "self": "/dms-cmis/v2/searches/documents/idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIm)",
      "number": "[00771588-1800-C24C-8178-17F3982485DE]",
      "documentName": "JY0333-71269",
      "documentDescription": "CLAIM; #10",
      "mimeTypeName": "application/pdf",
      "categorization": {},
      "URL": {
        "URLID": "https://qa.dms.metlife.com/dms-viewer/web/viewer"
      },
      "producer": {
        "StakeholderManagerOfOwner": "Vanatta, Lisa"
      },
      "person": {
        "personFullName": "Jensen, Jackie"
      },
      "form": {
        "lineOfBusinessName": "Group Benefits",
        "formName": "Dental Claim Form",
        "formDescription": "Dental Claim Form",
        "onlyDirectLinkIndicator": "true",
        "pagesCount": "6",
        "regionListText": "All States",
        "effectiveDateTimestamp": "05/23",
        "MajorVersionNumber": "1",
        "formNumber": "JY0333-71269"
      },
      "product": {
        "productName": "DENTAL-E; #101",
        "productClassName": "Group Dental"
      }
    },
    {
      "documentID": "idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIM)",
      "self": "/dms-cmis/v2/searches/documents/idd_3nTWep: LPB: [jjggOBEK-OEjj-kLNk-EOgE-OgnMhELNEBIm)",
      "number": "[00771588-1800-C24C-8178-17F3982485DE]",
      "documentName": "JY0333-71269",
      "documentDescription": "CLAIM; #10",
      "mimeTypeName": "application/pdf",
      "categorization": {},
      "URL": {
        "URLID": "https://qa.dms.metlife.com/dms-viewer/web/viewer"
      },
      "producer": {
        "StakeholderManagerOfOwner": "Vanatta, Lisa"
      },
      "person": {
        "personFullName": "Jensen, Jackie"
      },
      "form": {
        "lineOfBusinessName": "Group Benefits",
        "formName": "Dental Claim Form",
        "formDescription": "Dental Claim Form",
        "onlyDirectLinkIndicator": "true",
        "pagesCount": "6",
        "regionListText": "All States",
        "effectiveDateTimestamp": "05/23",
        "MajorVersionNumber": "1",
        "formNumber": "JY0333"
      },
      "product": {
        "productName": "DENTAL-E; #101",
        "productClassName": "Group Dental"
      }
    }
  ]
};

// Function to generate XML for each item
function generateXML(item) {
  return `<ns2:FormDocuments>
    <ns2:Met_FormAssociation>
        <ns2:Met_PlanType>${item.documentDescription.replace(/; #\d+/, '')}</ns2:Met_PlanType>
        <ns2:Met_PlanCode>${item.form.formName}</ns2:Met_PlanCode>
    </ns2:Met_FormAssociation>
    <ns2:Attachment>
        <ns2:AttachmentKey>${item.form.formNumber}</ns2:AttachmentKey>
        <ns2:Met_AttachmentStatusDesc>${item.product.productClassName}</ns2:Met_AttachmentStatusDesc>
        <ns2:Met_AttachmentSize>${item.form.pagesCount}</ns2:Met_AttachmentSize>
        <ns2:MimeType>${item.mimeTypeName.split('/').pop()}</ns2:MimeType>
    </ns2:Attachment>
</ns2:FormDocuments>\n\n`;
}

// Generate XML for each item
var xmlOutput = json.items.map(generateXML).join('');

print(xmlOutput);


//var clientId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "PropertyValue").item(0).getTextContent().trim();

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagNameNS("*", "CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagNameNS("*", "PropertyName");
        var propertyValues = criteria.getElementsByTagNameNS("*", "PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Extract UserId, AppName, and ClientId
var userId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "UserId").item(0).getTextContent().split('-')[0];
var appName = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "AppName").item(0).getTextContent();
var clientId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "Met_ClientId").item(0).getTextContent();
var clientId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "PropertyValue").item(0).getTextContent().trim();

// Extract all property values
var propertyValues = extractAllPropertyValues();

// Generate JSON output dynamically
var jsonOutput = {
    q: `((searchKeyParameterName=="Met_ClientId"; searchKeyParameterValue=="${userId}");` +
        propertyValues.map(item => `(searchKeyParameterName=="${item.propertyName}"; searchKeyParameterValue=="${item.propertyValue}")`).join(', ') + ")",
    extension: {
        sourceSystemName: appName,
        searchTypeCode: "EAI1244"
    },
    metadata: {
        limit: 10,
        offset: 1
    }
};

// Output the JSON
print(JSON.stringify(jsonOutput, null, 2));

// Output the fetched values
print(`UserId: ${userId}`);
print(`AppName: ${appName}`);
print(`ClientId: ${clientId}`);



















r xmlStr = `...`; // Your XML string here

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagNameNS("*", "CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagNameNS("*", "PropertyName");
        var propertyValues = criteria.getElementsByTagNameNS("*", "PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Extract Met_ClientId
var userId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "UserId").item(0).getTextContent().split('-')[0];

// Extract sourceSystemName
var sourceSystemName = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "TransType").item(0).getTextContent();

// Extract all property values
var propertyValues = extractAllPropertyValues();

// Generate JSON output dynamically
var jsonOutput = {
    q: `((searchKeyParameterName=="Met_ClientId"; searchKeyParameterValue=="${userId}");` +
        propertyValues.map(item => `(searchKeyParameterName=="${item.propertyName}"; searchKeyParameterValue=="${item.propertyValue}")`).join(', ') + ")",
    extension: {
        sourceSystemName: sourceSystemName,
        searchTypeCode: "EAI1244"
    },
    metadata: {
        limit: 10,
        offset: 1
    }
};

print(JSON.stringify(jsonOutput, null, 2));







var xmlStr = `...`; // Your XML string here

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagNameNS("*", "CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagNameNS("*", "PropertyName");
        var propertyValues = criteria.getElementsByTagNameNS("*", "PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Extract UserId and AppName
var userId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "UserId").item(0).getTextContent();
var appName = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "AppName").item(0).getTextContent();
var clientId = userId.split('-')[0];

// Extract all property values
var propertyValues = extractAllPropertyValues();

// Generate the required string dynamically
var queryString = `((searchKeyParameterName=="Met_ClientId"; searchKeyParameterValue=="${clientId}");` +
    propertyValues.map(item => `(searchKeyParameterName=="${item.propertyName}"; searchKeyParameterValue=="${item.propertyValue}")`).join(', ') + ")";

// Store the result in variables
var queryResult = queryString;

// Print the values
print("UserId: " + userId);
print("AppName: " + appName);
print("ClientId: " + clientId);
print(queryResult);























// Load required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');
var StringWriter = Java.type('java.io.StringWriter');
var DOMSource = Java.type('javax.xml.transform.dom.DOMSource');
var StreamResult = Java.type('javax.xml.transform.stream.StreamResult');
var TransformerFactory = Java.type('javax.xml.transform.TransformerFactory');

// XML content
var xmlString = `<Data>
  <Key1>MGI</Key1>
  <Key2>2015DE</Key2>
  <Delivery>Archive</Delivery>
  <DocumentType>
    <DocumentName>ASOLTDEDB</DocumentName>
  </DocumentType>
  <DocumentDetails>
    <!-- Content of DocumentDetails -->
  </DocumentDetails>
  <!-- More content within Data -->
</Data>
<Data>
  <Key1>MGI</Key1>
  <Key2>2015DE</Key2>
  <Delivery>Archive</Delivery>
  <DocumentType>
    <DocumentName>ASOLTDEDB</DocumentName>
  </DocumentType>
  <DocumentDetails>
    <!-- Content of DocumentDetails -->
  </DocumentDetails>
  <!-- More content within Data -->
</Data>`;

// Create a ByteArrayInputStream from the XML string
var inputStream = new ByteArrayInputStream(xmlString.getBytes());

// Parse the XML
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var doc = builder.parse(new InputSource(inputStream));

// Get the list of all <Data> elements
var dataList = doc.getElementsByTagName("Data");

// Loop through each <Data> element and print its content
for (var i = 0; i < dataList.getLength(); i++) {
    var data = dataList.item(i);
    var transformerFactory = TransformerFactory.newInstance();
    var transformer = transformerFactory.newTransformer();
    var writer = new StringWriter();
    transformer.transform(new DOMSource(data), new StreamResult(writer));
    var dataContent = writer.toString();
    print("Data " + (i + 1) + ":\n" + dataContent);
}




// Load required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');
var StringWriter = Java.type('java.io.StringWriter');
var DOMSource = Java.type('javax.xml.transform.dom.DOMSource');
var StreamResult = Java.type('javax.xml.transform.stream.StreamResult');
var TransformerFactory = Java.type('javax.xml.transform.TransformerFactory');

// XML content
var xmlString = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Key1>MGI</Key1>
  <Key2>2015DE</Key2>
  <Delivery>Archive</Delivery>
  <DocumentType>
    <DocumentName>ASOLTDEDB</DocumentName>
  </DocumentType>
  <DocumentDetails>
    <!-- Content of DocumentDetails -->
  </DocumentDetails>
  <!-- More content within Data -->
</Data>
<Data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Key1>MGI</Key1>
  <Key2>2015DE</Key2>
  <Delivery>Archive</Delivery>
  <DocumentType>
    <DocumentName>ASOLTDEDB</DocumentName>
  </DocumentType>
  <DocumentDetails>
    <!-- Content of DocumentDetails -->
  </DocumentDetails>
  <!-- More content within Data -->
</Data>`;

// Create a ByteArrayInputStream from the XML string
var inputStream = new ByteArrayInputStream(xmlString.getBytes());

// Parse the XML
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var doc = builder.parse(new InputSource(inputStream));

// Get the list of all <Data> elements
var dataList = doc.getElementsByTagName("Data");

// Loop through each <Data> element and print its content
for (var i = 0; i < dataList.getLength(); i++) {
    var data = dataList.item(i);
    var transformerFactory = TransformerFactory.newInstance();
    var transformer = transformerFactory.newTransformer();
    var writer = new StringWriter();
    transformer.transform(new DOMSource(data), new StreamResult(writer));
    var dataContent = writer.toString();
    print("Data " + (i + 1) + ":\n" + dataContent);
}






















/ Load required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');
var StringWriter = Java.type('java.io.StringWriter');
var DOMSource = Java.type('javax.xml.transform.dom.DOMSource');
var StreamResult = Java.type('javax.xml.transform.stream.StreamResult');
var TransformerFactory = Java.type('javax.xml.transform.TransformerFactory');

// XML string
var xmlString = `
<soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
               xmlns:ns4="http://services.metlife.com/standards/smartservice/controlmessage"
               xmlns:ns3="urn:com.metlife.ead.channels.services.formDocument.formDocumentV4"
               xmlns:ns2="http://MetLife/CMM/FormDocument"
               xmlns="http://services.metlife.com/standards/pingsvc">
    <ns2:RequestHeader>
        <ns2:UserId>74345-00371924117</ns2:UserId>
        <ns2:UserDate>2024-03-20</ns2:UserDate>
        <ns2:UserTime>07:02:51</ns2:UserTime>
        <ns2:VendorApp>
            <ns2:AppName>MYBENEFITS</ns2:AppName>
        </ns2:VendorApp>
        <ns2:TransTrackingID>9c6269ef-2195-4fe2-a194-bc9dc6a81646</ns2:TransTrackingID>
        <ns2:TransType>eForms</ns2:TransType>
        <ns2:TransSubType>Search eForms</ns2:TransSubType>
        <ns2:BusinessService>
            <ns2:ServiceName>searchFormDocument</ns2:ServiceName>
        </ns2:BusinessService>
        <ns2:TransExeDate>2024-03-20</ns2:TransExeDate>
        <ns2:TransExeTime>07:02:51</ns2:TransExeTime>
    </ns2:RequestHeader>
    <ns2:Search>
        <ns2:CriteriaOperator>AND</ns2:CriteriaOperator>
        <ns2:CriteriaExpression>
            <ns2:Criteria>
                <ns2:ObjectType>Met_FormAssociation</ns2:ObjectType>
                <ns2:PropertyName>Met_ClientId</ns2:PropertyName>
                <ns2:PropertyValue>74345</ns2:PropertyValue>
                <ns2:Operation>EQUALS</ns2:Operation>
                <ns2:ComparedObjectType>FormInstance</ns2:ComparedObjectType>
                <ns2:ComparedPropertyName>FormInstance.Met_FormAssociation.Met_ClientId</ns2:ComparedPropertyName>
            </ns2:Criteria>
        </ns2:CriteriaExpression>
        <ns2:CriteriaExpression>
            <ns2:Criteria>
                <ns2:ObjectType>Met_FormAssociation</ns2:ObjectType>
                <ns2:PropertyName>Met_PlanCode</ns2:PropertyName>
                <ns2:PropertyValue>DISABILITY</ns2:PropertyValue>
                <ns2:Operation>EQUALS</ns2:Operation>
                <ns2:ComparedObjectType>FormInstance</ns2:ComparedObjectType>
                <ns2:ComparedPropertyName>FormInstance.Met_FormAssociation.Met_PlanCode</ns2:ComparedPropertyName>
            </ns2:Criteria>
        </ns2:CriteriaExpression>
        <!-- Additional CriteriaExpression elements here -->
    </ns2:Search>
</soapenv:Body>`;

// Function to parse XML
function parseXML(xmlString) {
    var byteArrayInputStream = new ByteArrayInputStream(new java.lang.String(xmlString).getBytes("UTF-8"));
    var documentBuilderFactory = DocumentBuilderFactory.newInstance();
    var documentBuilder = documentBuilderFactory.newDocumentBuilder();
    var document = documentBuilder.parse(new InputSource(byteArrayInputStream));

    var criteriaExpressions = document.getElementsByTagName("ns2:CriteriaExpression");

    var output = "";
    var count = 1;

    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteriaExpression = criteriaExpressions.item(i);
        var stringWriter = new StringWriter();
        var transformer = TransformerFactory.newInstance().newTransformer();
        var domSource = new DOMSource(criteriaExpression);
        var streamResult = new StreamResult(stringWriter);
        transformer.transform(domSource, streamResult);
        var criteriaExpressionString = stringWriter.toString();

        output += "const criteriaExpression" + count + " = `" + criteriaExpressionString + "`;\n";
        count++;
    }

    return { output: output, count: count - 1 };
}

// Parse XML and print output
var result = parseXML(xmlString);
print("Number of CriteriaExpression elements: " + result.count);
print(result.output);

























// Your XML string with namespace declarations
var xmlStr = `...`;  // The entire XML string you provided goes here

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var nsResolver = {
        lookupNamespaceURI: function(prefix) {
            switch (prefix) {
                case 'ns2':
                    return 'http://MetLife/CMM/FormDocument';
                default:
                    return null;
            }
        }
    };

    var xPath = javax.xml.xpath.XPathFactory.newInstance().newXPath();
    xPath.setNamespaceContext(nsResolver);

    var criteriaExpressions = xmlDoc.getElementsByTagNameNS('http://MetLife/CMM/FormDocument', 'CriteriaExpression');
    var results = [];

    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyName = criteria.getElementsByTagNameNS('http://MetLife/CMM/FormDocument', 'PropertyName').item(0).getTextContent().trim();
        var propertyValue = criteria.getElementsByTagNameNS('http://MetLife/CMM/FormDocument', 'PropertyValue').item(0).getTextContent().trim();

        results.push({ propertyName: propertyName, propertyValue: propertyValue });
    }

    // Extract UserId and AppName
    var userId = xmlDoc.getElementsByTagNameNS('http://MetLife/CMM/FormDocument', 'UserId').item(0).getTextContent().trim();
    var appName = xmlDoc.getElementsByTagNameNS('http://MetLife/CMM/FormDocument', 'AppName').item(0).getTextContent().trim();

    results.push({ propertyName: "UserId", propertyValue: userId });
    results.push({ propertyName: "AppName", propertyValue: appName });

    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function(item) {
    console.log("Property Name:"+ item.propertyName);
    console.log("Property Value:"+ item.propertyValue);
});

















// Your XML string with namespace declarations
var xmlStr = `...`;  // The entire XML string you provided goes here

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var nsResolver = {
        lookupNamespaceURI: function(prefix) {
            switch (prefix) {
                case 'ns2':
                    return 'http://MetLife/CMM/FormDocument';
                default:
                    return null;
            }
        }
    };

    var xPath = javax.xml.xpath.XPathFactory.newInstance().newXPath();
    xPath.setNamespaceContext(nsResolver);

    var criteriaExpressions = xPath.evaluate("//ns2:CriteriaExpression", xmlDoc, javax.xml.xpath.XPathConstants.NODESET);
    var results = [];

    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyName = xPath.evaluate("ns2:Criteria/ns2:PropertyName", criteria, javax.xml.xpath.XPathConstants.STRING);
        var propertyValue = xPath.evaluate("ns2:Criteria/ns2:PropertyValue", criteria, javax.xml.xpath.XPathConstants.STRING);

        if (propertyName && propertyValue) {
            results.push({ propertyName: propertyName.trim(), propertyValue: propertyValue.trim() });
        }
    }

    // Extract UserId and AppName
    var userId = xPath.evaluate("//ns2:UserId", xmlDoc, javax.xml.xpath.XPathConstants.STRING).trim();
    var appName = xPath.evaluate("//ns2:AppName", xmlDoc, javax.xml.xpath.XPathConstants.STRING).trim();

    results.push({ propertyName: "UserId", propertyValue: userId });
    results.push({ propertyName: "AppName", propertyValue: appName });

    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function(item) {
    print("Property Name:", item.propertyName);
    print("Property Value:", item.propertyValue);
});





// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagName("CriteriaExpression");
    var results = [];

    // Adding UserId and AppName directly to the results
    var userId = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "UserId")[0].textContent.trim();
    results.push({ propertyName: "UserId", propertyValue: userId });

    var appName = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "AppName")[0].textContent.trim();
    results.push({ propertyName: "AppName", propertyValue: appName });

    // Iterating through CriteriaExpression elements to extract PropertyName and PropertyValue pairs
    for (var i = 0; i < criteriaExpressions.length; i++) {
        var criteria = criteriaExpressions[i];
        var propertyNames = criteria.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "PropertyName");
        var propertyValues = criteria.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "PropertyValue");
        if (propertyNames.length > 0 && propertyValues.length > 0) {
            var propertyName = propertyNames[0].textContent.trim();
            var propertyValue = propertyValues[0].textContent.trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function (item) {
    print("Property Name:", item.propertyName);
    print("Property Value:", item.propertyValue);
});




// Your XML string with namespace declarations
var xmlStr = `
<soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
               xmlns:ns4="http://services.metlife.com/standards/smartservice/controlmessage"
               xmlns:ns3="urn:com.metlife.ead.channels.services.formDocument.formDocumentV4"
               xmlns:ns2="http://MetLife/CMM/FormDocument"
               xmlns="http://services.metlife.com/standards/pingsvc">
    <ns2:RequestHeader>
        <ns2:UserId>74345-00371924117</ns2:UserId>
        <ns2:UserDate>2024-03-20</ns2:UserDate>
        <ns2:UserTime>07:02:51</ns2:UserTime>
        <ns2:VendorApp>
            <ns2:AppName>MYBENEFITS</ns2:AppName>
        </ns2:VendorApp>
        <ns2:TransTrackingID>9c6269ef-2195-4fe2-a194-bc9dc6a81646</ns2:TransTrackingID>
        <ns2:TransType>eForms</ns2:TransType>
        <ns2:TransSubType>Search eForms</ns2:TransSubType>
        <ns2:BusinessService>
            <ns2:ServiceName>searchFormDocument</ns2:ServiceName>
        </ns2:BusinessService>
        <ns2:TransExeDate>2024-03-20</ns2:TransExeDate>
        <ns2:TransExeTime>07:02:51</ns2:TransExeTime>
    </ns2:RequestHeader>
    <ns2:Search>
        <ns2:CriteriaOperator>AND</ns2:CriteriaOperator>
        <ns2:CriteriaExpression>
            <ns2:Criteria>
                <ns2:ObjectType>Met_FormAssociation</ns2:ObjectType>
                <ns2:PropertyName>Met_ClientId</ns2:PropertyName>
                <ns2:PropertyValue>74345</ns2:PropertyValue>
                <ns2:Operation>EQUALS</ns2:Operation>
                <ns2:ComparedObjectType>FormInstance</ns2:ComparedObjectType>
                <ns2:ComparedPropertyName>FormInstance.Met_FormAssociation.Met_ClientId</ns2:ComparedPropertyName>
            </ns2:Criteria>
        </ns2:CriteriaExpression>
        
        <!-- Your other CriteriaExpression elements go here -->

    </ns2:Search>
</soapenv:Body>
`;

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "PropertyName");
        var propertyValues = criteria.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", "PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function (item) {
    print("Property Name:", item.propertyName);
    print("Property Value:", item.propertyValue);
});



















// XML string
var xmlStr = `<soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
               xmlns:ns4="http://services.metlife.com/standards/smartservice/controlmessage"
               xmlns:ns3="urn:com.metlife.ead.channels.services.formDocument.formDocumentV4"
               xmlns:ns2="http://MetLife/CMM/FormDocument"
               xmlns="http://services.metlife.com/standards/pingsvc">

    <ns2:RequestHeader>
        <ns2:UserId>74345-00371924117</ns2:UserId>
        <ns2:UserDate>2024-03-20</ns2:UserDate>
        <ns2:UserTime>07:02:51</ns2:UserTime>
        <ns2:VendorApp>
            <ns2:AppName>MYBENEFITS</ns2:AppName>
        </ns2:VendorApp>
        <ns2:TransTrackingID>9c6269ef-2195-4fe2-a194-bc9dc6a81646</ns2:TransTrackingID>
        <ns2:TransType>eForms</ns2:TransType>
        <ns2:TransSubType>Search eForms</ns2:TransSubType>
        <ns2:BusinessService>
            <ns2:ServiceName>searchFormDocument</ns2:ServiceName>
        </ns2:BusinessService>
        <ns2:TransExeDate>2024-03-20</ns2:TransExeDate>
        <ns2:TransExeTime>07:02:51</ns2:TransExeTime>
    </ns2:RequestHeader>

    <ns2:Search>
        <ns2:CriteriaOperator>AND</ns2:CriteriaOperator>
        <ns2:CriteriaExpression>
            <ns2:Criteria>
                <ns2:ObjectType>Met_FormAssociation</ns2:ObjectType>
                <ns2:PropertyName>Met_ClientId</ns2:PropertyName>
                <ns2:PropertyValue>74345</ns2:PropertyValue>
                <ns2:Operation>EQUALS</ns2:Operation>
                <ns2:ComparedObjectType>FormInstance</ns2:ComparedObjectType>
                <ns2:ComparedPropertyName>FormInstance.Met_FormAssociation.Met_ClientId</ns2:ComparedPropertyName>
            </ns2:Criteria>
        </ns2:CriteriaExpression>
        
        <ns2:CriteriaExpression>
            <ns2:Criteria>
                <ns2:ObjectType>Met_FormAssociation</ns2:ObjectType>
                <ns2:PropertyName>Met_PlanCode</ns2:PropertyName>
                <ns2:PropertyValue>SOH</ns2:PropertyValue>
                <ns2:Operation>EQUALS</ns2:Operation>
                <ns2:ComparedObjectType>FormInstance</ns2:ComparedObjectType>
                <ns2:ComparedPropertyName>FormInstance.Met_FormAssociation.Met_PlanCode</ns2:ComparedPropertyName>
            </ns2:Criteria>
        </ns2:CriteriaExpression>
        
    </ns2:Search>

</soapenv:Body>`;

// Function to extract property value based on tag name with namespace prefix
function extractPropertyValue(tagName) {
    var xmlDoc = new DOMParser().parseFromString(xmlStr, "text/xml");
    var nodes = xmlDoc.getElementsByTagNameNS("http://MetLife/CMM/FormDocument", tagName);
    if (nodes.length > 0) {
        return nodes[0].textContent.trim();
    }
    return null; // Property not found
}

// Get the values
var userId = extractPropertyValue("ns2:UserId");
var appName = extractPropertyValue("ns2:AppName");
var metClientId = extractPropertyValue("ns2:Met_ClientId");
var metPlanCode = extractPropertyValue("ns2:Met_PlanCode");

// Print the values
console.log("UserId:", userId);
console.log("AppName:", appName);
console.log("Met_ClientId:", metClientId);
console.log("Met_PlanCode:", metPlanCode);








// Your XML string with namespace declarations
var xmlStr = `
<root xmlns:ns2="http://example.com/ns2">
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_ClientId</ns2:PropertyName>
        <ns2:PropertyValue>74535</ns2:PropertyValue>
    </CriteriaExpression>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_Plancode</ns2:PropertyName>
        <ns2:PropertyValue>SOH</ns2:PropertyValue>
    </CriteriaExpression>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_Plancode</ns2:PropertyName>
        <ns2:PropertyValue>Dental-E</ns2:PropertyValue>
    </CriteriaExpression>
</root>
`;

// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagName("CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagNameNS("http://example.com/ns2", "PropertyName");
        var propertyValues = criteria.getElementsByTagNameNS("http://example.com/ns2", "PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function (item) {
    print("Property Name:", item.propertyName);
    print("Property Value:", item.propertyValue);
});




//Search
// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');
var NodeList = Java.type('org.w3c.dom.NodeList');

// Your XML string
var xmlStr = `
<root>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_ClientId</ns2:PropertyName>
        <ns2:PropertyValue>74535</ns2:PropertyValue>
    </CriteriaExpression>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_Plancode</ns2:PropertyName>
        <ns2:PropertyValue>SOH</ns2:PropertyValue>
    </CriteriaExpression>
    <CriteriaExpression>
        <ns2:objectType>metformAssociation</ns2:objectType>
        <ns2:PropertyName>Met_Plancode</ns2:PropertyName>
        <ns2:PropertyValue>Dental-E</ns2:PropertyValue>
    </CriteriaExpression>
</root>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all PropertyName and PropertyValue pairs
function extractAllPropertyValues() {
    var criteriaExpressions = xmlDoc.getElementsByTagName("CriteriaExpression");
    var results = [];
    for (var i = 0; i < criteriaExpressions.getLength(); i++) {
        var criteria = criteriaExpressions.item(i);
        var propertyNames = criteria.getElementsByTagName("ns2:PropertyName");
        var propertyValues = criteria.getElementsByTagName("ns2:PropertyValue");
        if (propertyNames.getLength() > 0 && propertyValues.getLength() > 0) {
            var propertyName = propertyNames.item(0).getTextContent().trim();
            var propertyValue = propertyValues.item(0).getTextContent().trim();
            results.push({ propertyName: propertyName, propertyValue: propertyValue });
        }
    }
    return results;
}

// Get all values
var propertyValues = extractAllPropertyValues();
propertyValues.forEach(function (item) {
    print("Property Name:", item.propertyName);
    print("Property Value:", item.propertyValue);
});

























function extractPropertyValue(propertyName) {
    var propertyNodes = xmlDoc.getElementsByTagName("for:PropertyName");
    for (var i = 0; i < propertyNodes.getLength(); i++) {
        var node = propertyNodes.item(i);
        if (node.getTextContent().trim() === propertyName) {
            var valueNode = node.nextSibling;
            return valueNode.getTextContent().trim();
        }
    }
    return null; // Property not found
}

// Get the values
var attachmentKey = extractPropertyValue("AttachmentKey");
var mimeType = extractPropertyValue("MimeType");



// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Your XML string
var xmlStr = `
<CriteriaExpression>
    <CriteriaOperator>AND</CriteriaOperator>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form Id -->
        <for:PropertyName>AttachmentKey</for:PropertyName>
        <for:PropertyValue>43132</for:PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.AttachmentKey</ComparedPropertyName>
    </Criteria>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form type -->
        <for:PropertyName>MimeType</for:PropertyName>
        <for:PropertyValue>PDF</for:PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.MimeType</ComparedPropertyName>
    </Criteria>
</CriteriaExpression>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract property value based on property name with namespace prefix
function extractPropertyValueWithNamespace(propertyName) {
    var nodes = xmlDoc.getElementsByTagNameNS("*", propertyName);
    if (nodes.getLength() > 0) {
        return nodes.item(0).getTextContent().trim();
    }
    return null; // Property not found
}

// Get the values with namespace prefix
var attachmentKey = extractPropertyValueWithNamespace("for:PropertyName");
var mimeType = extractPropertyValueWithNamespace("for:PropertyValue");

print("Attachment Key:", attachmentKey);
print("MIME Type:", mimeType);




// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Your XML string
var xmlStr = `
<CriteriaExpression>
    <CriteriaOperator>AND</CriteriaOperator>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form Id -->
        <PropertyName>AttachmentKey</PropertyName>
        <PropertyValue>43132</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.AttachmentKey</ComparedPropertyName>
    </Criteria>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form type -->
        <PropertyName>MimeType</PropertyName>
        <PropertyValue>PDF</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.MimeType</ComparedPropertyName>
    </Criteria>
</CriteriaExpression>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract property value based on property name
function extractPropertyValue(propertyName) {
    print("Extracting property value for:", propertyName);
    var criteriaNodes = xmlDoc.getElementsByTagName('PropertyName');
    for (var i = 0; i < criteriaNodes.getLength(); i++) {
        var node = criteriaNodes.item(i);
        if (node.getTextContent() === propertyName) {
            print("Found property:", propertyName);
            var valueNode = node.nextSibling;
            var value = valueNode ? valueNode.getTextContent().trim() : null;
            print("Extracted value:", value);
            return value;
        }
    }
    print("Property not found:", propertyName);
    return null; // Property not found
}

// Get the values
var attachmentKey = extractPropertyValue("AttachmentKey");
var mimeType = extractPropertyValue("MimeType");

print("Attachment Key:", attachmentKey);
print("MIME Type:", mimeType);





// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Your XML string
var xmlStr = `
<CriteriaExpression>
    <CriteriaOperator>AND</CriteriaOperator>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form Id -->
        <PropertyName>AttachmentKey</PropertyName>
        <PropertyValue>43132</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.AttachmentKey</ComparedPropertyName>
    </Criteria>
    <Criteria>
        <ObjectType>Attachment</ObjectType>
        <!-- Document/Form type -->
        <PropertyName>MimeType</PropertyName>
        <PropertyValue>PDF</PropertyValue>
        <Operation>EQUALS</Operation>
        <ComparedObjectType>FormInstance</ComparedObjectType>
        <ComparedPropertyName>FormInstance.Attachment.MimeType</ComparedPropertyName>
    </Criteria>
</CriteriaExpression>
`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract property value based on property name
function extractPropertyValue(propertyName) {
    var criteriaNodes = xmlDoc.getElementsByTagName('PropertyName');
    for (var i = 0; i < criteriaNodes.getLength(); i++) {
        var node = criteriaNodes.item(i);
        if (node.getTextContent() === propertyName) {
            return node.getNextSibling().getTextContent().trim();
        }
    }
    return null; // Property not found
}

// Get the values
var attachmentKey = extractPropertyValue("AttachmentKey");
var mimeType = extractPropertyValue("MimeType");

print("Attachment Key:", attachmentKey);
print("MIME Type:", mimeType);
