
import os
import shutil
from PyPDF2 import PdfReader

def is_xfa_pdf(pdf_path):
    try:
        with open(pdf_path, 'rb') as f:
            reader = PdfReader(f)
            catalog = reader.trailer['/Root']
            if '/AcroForm' in catalog and '/XFA' in catalog['/AcroForm']:
                return True
            return False
    except Exception as e:
        print(f"Error checking PDF {pdf_path}: {e}")
        return False

def separate_xfa_pdfs(input_folder, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith('.pdf'):
            input_path = os.path.join(input_folder, filename)
            if is_xfa_pdf(input_path):
                output_path = os.path.join(output_folder, filename)
                shutil.move(input_path, output_path)
                print(f"Moved XFA PDF: {filename}")
            else:
                print(f"Non-XFA PDF: {filename}")

    print("Separation complete.")

# Example usage
input_folder = 'path/to/your/input_folder'
output_folder = 'path/to/your/output_folder'

separate_xfa_pdfs(input_folder, output_folder)


import os
import shutil
from PyPDF2 import PdfFileReader

def is_xfa_pdf(pdf_path):
    try:
        with open(pdf_path, 'rb') as f:
            reader = PdfFileReader(f)
            catalog = reader.trailer['/Root']
            if '/AcroForm' in catalog and '/XFA' in catalog['/AcroForm']:
                return True
            return False
    except Exception as e:
        print(f"Error checking PDF {pdf_path}: {e}")
        return False

def separate_xfa_pdfs(input_folder, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith('.pdf'):
            input_path = os.path.join(input_folder, filename)
            if is_xfa_pdf(input_path):
                output_path = os.path.join(output_folder, filename)
                shutil.move(input_path, output_path)
                print(f"Moved XFA PDF: {filename}")
            else:
                print(f"Non-XFA PDF: {filename}")

    print("Separation complete.")

# Example usage
input_folder = 'path/to/your/input_folder'
output_folder = 'path/to/your/output_folder'

separate_xfa_pdfs(input_folder, output_folder)






function wrapInCustomCdata(xmlString, startTag, endTag) {
    // Find the start and end of the content to be wrapped
    const start = xmlString.indexOf(startTag);
    const end = xmlString.indexOf(endTag) + endTag.length;

    if (start === -1 || end === -1) {
        throw new Error("Start tag or end tag not found in the XML string.");
    }

    const contentToWrap = xmlString.slice(start, end);

    // Create a new string with the custom CDATA section
    const wrappedContent = `<cdata>${contentToWrap}</cdata>`;

    // Replace the original content with the custom CDATA wrapped content
    const newXmlString = xmlString.slice(0, start) + wrappedContent + xmlString.slice(end);

    // Remove the closing </eApp> tag
    const finalXmlString = newXmlString.replace('</eApp>', '');

    return finalXmlString;
}

function removeInitialSection(xmlString, removeUpToTag) {
    // Find the end of the part to be removed
    const endRemove = xmlString.indexOf(removeUpToTag);

    if (endRemove === -1) {
        throw new Error(`Tag ${removeUpToTag} not found in the XML string.`);
    }

    // Remove the specified initial section
    const xmlWithoutInitialSection = xmlString.slice(endRemove);

    return xmlWithoutInitialSection;
}

const xmlString = `
<eApp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:/Metlife TeleApp Project/xsltProjects_8/eAppExtended_9.xsd">
    <PolNumber />
    <PolSuffix />
    <Company>
        <CompanyID />
        <CompanyCode />
    </Company>
    <Application>
        <Name>IDI</Name>
        <FormNames>IDIAPP05-1-NW</FormNames>
        <PDFType>FLATTEN</PDFType>
        <RespType>PDF</RespType>
    </Application>
    <empFirstName>Jane</empFirstName>
    <empMiddleName>M</empMiddleName>
    <empLastName>Doe</empLastName>
    <empSexFemale>1</empSexFemale>
    <empAddress>One Any Street</empAddress>
    <empCity>Anytown</empCity>
    <empStateCode>NJ</empStateCode>
    <empZip>08801</empZip>
    <empMailHome>1</empMailHome>
    <empDob>4/25/1970</empDob>
    <empAgeYears>49</empAgeYears>
    <empSsn>123456789</empSsn>
    <empPhoneNumber>2223334444</empPhoneNumber>
    <empOccupationTitle>BSA</empOccupationTitle>
    <empHireDate>05/10/2014</empHireDate>
    <empAnnualSalaryAmt>50000</empAnnualSalaryAmt>
    <compName>MetLife</compName>
    <compAddress>101 MetLife Way</compAddress>
    <compCity>Cary</compCity>
    <compState>NC</compState>
    <compZip>27513</compZip>
    <empAtWorkIndYes>1</empAtWorkIndYes>
    <empDisableNo>1</empDisableNo>
    <empCitizenYes>1</empCitizenYes>
    <empTobaccoNo>1</empTobaccoNo>
    <beneName>Mark L Doe</beneName>
    <beneRelationship>Spouse</beneRelationship>
    <beneDob>7/14/1969</beneDob>
    <empAppSignedAt>Anytown, NJ</empAppSignedAt>
    <empAppSignDate>5/10/2014</empAppSignDate>
    <empEsignatureId>Jane M Doe</empEsignatureId>
</eApp>`;

const removeUpToTag = '<empFirstName>';
const startTag = '<empFirstName>';
const endTag = '</empEsignatureId>';

try {
    const xmlWithoutInitialSection = removeInitialSection(xmlString, removeUpToTag);
    const resultXml = wrapInCustomCdata(xmlWithoutInitialSection, startTag, endTag);
    console.log(resultXml);
} catch (error) {
    console.error(error.message);
}





// Import required Java classes
var ByteArrayInputStream = Java.type('java.io.ByteArrayInputStream');
var DocumentBuilderFactory = Java.type('javax.xml.parsers.DocumentBuilderFactory');
var InputSource = Java.type('org.xml.sax.InputSource');

// Sample XML string
var xmlStr = `
<NS1:Envelope xmlns:NS1="http://schemas.xmlsoap.org/soap/envelope/">
    <NS1:Body>
        <NS2:ServiceRequest xmlns:NS2="http://services.eforms.metlife.com/formsAdminLookup/">
            <ServiceInfo>
                <TraceId>9c6269ef-2195-4fe2-a194-bc9dc6a81646</TraceId>
            </ServiceInfo>
            <FileLookup>
                <DefaultSearchParams>
                    <Param>
                        <Name>Consumer</Name>
                        <Value>MYBENEFITS</Value>
                    </Param>
                    <Param>
                        <Name>MyBenefits Case Number</Name>
                        <Value>5172342</Value>
                    </Param>
                </DefaultSearchParams>
                <SearchSet>
                    <Param>
                        <Name>SitusState</Name>
                        <Value>ME</Value>
                    </Param>
                </SearchSet>
                <SearchSet>
                    <Param>
                        <Name>ProductAppID</Name>
                        <Value>DENTAL-E</Value>
                    </Param>
                </SearchSet>
            </FileLookup>
        </NS2:ServiceRequest>
    </NS1:Body>
</NS1:Envelope>`;

// Parse the XML string
var factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
var builder = factory.newDocumentBuilder();
var is = new InputSource(new ByteArrayInputStream(xmlStr.getBytes('UTF-8')));
var xmlDoc = builder.parse(is);

// Function to extract all property values
function extractAllPropertyValues() {
    var paramElements = xmlDoc.getElementsByTagNameNS("*", "Param");
    var results = [];
    for (var i = 0; i < paramElements.getLength(); i++) {
        var param = paramElements.item(i);
        var name = param.getElementsByTagNameNS("*", "Name").item(0).getTextContent().trim();
        var value = param.getElementsByTagNameNS("*", "Value").item(0).getTextContent().trim();
        results.push({ name: name, value: value });
    }
    return results;
}

// Extract all property values
var propertyValues = extractAllPropertyValues();

// Extract the first occurrence of Consumer and MyBenefits Case Number
var consumer = propertyValues.find(item => item.name === "Consumer").value;
var caseNumber = propertyValues.find(item => item.name === "MyBenefits Case Number").value;

// Filter out SitusState from propertyValues
var filteredPropertyValues = propertyValues.filter(item => item.name !== "SitusState");

// Generate JSON output dynamically
var jsonOutput = {
    q: `((searchKeyParameterName=="Consumer"; searchKeyParameterValue=="${consumer}"),` +
        `(searchKeyParameterName=="Met_ClientId"; searchKeyParameterValue==${caseNumber});` +
        filteredPropertyValues
            .filter(item => item.name !== "Consumer" && item.name !== "MyBenefits Case Number")
            .map(item => `(searchKeyParameterName=="${item.name}"; searchKeyParameterValue=="${item.value}")`)
            .join(', ') + ")",
    extension: {
        sourceSystemName: "ExampleAppName", // Use appropriate value for sourceSystemName
        searchTypeCode: "EAI1244"
    },
    metadata: {
        limit: 10,
        offset: 1
    }
};

// Output the JSON
print(JSON.stringify(jsonOutput, null, 2));

// Output the fetched values
print(`Consumer: ${consumer}`);
print(`MyBenefits Case Number: ${caseNumber}`);
